# Use a modern version of the Compose file format
version: '3.8'

# This is a YAML extension field (a "template") that defines all the common settings.
# It makes it easy to keep all your services consistent.
x-base-service: &base-service
  # CRITICAL FOR JETSON: This is the correct way to enable GPU access.
  # It is the Docker Compose equivalent of '--runtime nvidia'.
  runtime: nvidia 

  # IMPORTANT: This image name must EXACTLY match the IMAGE_NAME variable
  # you set inside your docker/build.sh script.
  image: jetson-robot:humble
  
  # If you haven't built the image yet, this tells Compose how to build it.
  # It uses your project root as the context and finds the Dockerfile inside the docker/ folder.
  build:
    context: .
    dockerfile: docker/Dockerfile

  # --- Hardware & Networking Configuration ---
  ipc: host         # Allow services to share memory, which can improve performance.
  network_mode: host # ESSENTIAL for ROS 2: Allows nodes to discover each other easily.
  privileged: true  # Gives the container extended kernel privileges, often needed for full hardware access.

  # --- GUI Application Configuration ---
  environment:
    - DISPLAY=${DISPLAY}      # Pass the host's display variable to the container.
    - QT_X11_NO_MITSHM=1    # A common fix for Qt-based apps (like RViz) in Docker.
  volumes:
    # Mount your source code for LIVE EDITING. Change code on your Jetson,
    # and it's instantly reflected inside the container. No need to rebuild.
    - ./src:/root/ros2_ws/src
    
    # Mount the X11 socket to allow GUI applications to appear on your screen.
    - /tmp/.X11-unix:/tmp/.X11-unix:rw

    # Mount the host's device directory. This gives the container access to cameras
    # (/dev/video*), serial ports (/dev/tty*), joysticks, etc.
    - /dev:/dev

# --- SERVICE DEFINITIONS ---
services:

  # --- DEVELOPMENT SERVICE ---
  # This is your main entry point for development. It gives you an interactive terminal
  # inside the fully configured container.
  #
  # ==> USAGE: docker-compose run --rm dev
  #
  dev:
    <<: *base-service # Inherits all settings from the template above
    container_name: my_robot_dev_env
    stdin_open: true # Keeps stdin open, equivalent to 'docker run -i'
    tty: true        # Allocates a pseudo-TTY, equivalent to 'docker run -t'
    command: ["bash"] # The command to run when the container starts

  # --- APPLICATION SERVICES (Example) ---
  # Once you have a ROS 2 launch file, you can define services to run it.
  # This allows you to start your entire robot simulation with a single command.
  #
  # ==> USAGE: docker-compose up
  #
  # simulation:
  #   <<: *base-service
  #   container_name: my_robot_simulation
  #   command: ["ros2", "launch", "your_package_name", "your_launch_file.launch.py"]